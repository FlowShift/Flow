<!-- build configuration -->
<project name="msoy" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <!-- define some basic project parameters -->
  <property name="app.name"     value="msoy"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"       value="src/java"/>
  <property name="gsrc.dir"      value="src/gwt"/>
  <property name="asrc.dir"      value="src/as"/>
  <property name="deploy.dir"    value="dist"/>
  <property name="classes.dir"   value="${deploy.dir}/classes"/>
  <property name="tclasses.dir"  value="${deploy.dir}/test-classes"/>
  <property name="gwtout.dir"    value="pages/gwt"/>
  <property name="extlibs.dir"   value="extlibs/java"/>
  <property name="javadoc.title" value="Metasoy API"/>

  <!-- define various packaging properties -->
  <property name="msoy.user"        value="ubuntu"/>
  <property name="burl.user"        value="ubuntu"/>
  <property name="msoy.group"       value="ubuntu"/>
  <property name="maintainer.name"  value="Michael Bayne"/>
  <property name="maintainer.email" value="mdb@threerings.net"/>

  <!-- defines the build version (normally zero unless we're doing a package build) -->
  <property name="version" value="0"/>

  <!-- import any local build configuration -->
  <property file="build.properties"/>

  <!-- define our subprojects and include the standard build system -->
  <import file="build/etc/build-support.xml"/>
  <fileset dir="." id="check.paths">
    <include name="${src.dir}/**/*.java"/>
    <exclude name="${src.dir}/**/data/*Marshaller.java"/>
    <exclude name="${src.dir}/**/server/*Provider.java"/>
    <exclude name="${src.dir}/**/server/*Dispatcher.java"/>
    <include name="${gsrc.dir}/client/**/*.java"/>
    <exclude name="${gsrc.dir}/**/*Messages.java"/>
    <exclude name="${gsrc.dir}/client/images/**/*Images.java"/>
  </fileset>

  <!-- override the src dirset and package names for the common javadoc target -->
  <property name="javadoc.pkg.names" value="client.*,com.threerings.msoy.*"/>
  <path id="javadoc.src.path">
    <!-- TODO make this only look for bits inside of client/ -->
    <dirset dir="${gsrc.dir}">
      <exclude name="**/.svn"/>
    </dirset>
    <dirset dir="${src.dir}">
      <exclude name="**/.svn"/>
    </dirset>
  </path>

  <!-- declare the libraries needed only during the build process -->
  <filelist dir="." id="build.libs">
    <file name="${extlibs.dir}/junit-3.7.jar"/>
    <file name="${extlibs.dir}/junit4.jar"/>

    <!--<file name="${extlibs.dir}/retroweaver-all-1.2.2.jar"/>
    <file name="${extlibs.dir}/retroweaver-rt-1.2.2.jar"/>-->
  </filelist>

  <!-- declare the libraries needed by the MSOY runtime and for building -->
  <filelist dir="." id="runtime.libs">
    <!-- The following are used for HTML sanitization -->
<!-- TODO: move into lib?
    <file name="${extlibs.dir}/antisamy/antisamy-bin.1.0.jar"/>
    <file name="${extlibs.dir}/antisamy/batik-css.jar"/>
    <file name="${extlibs.dir}/antisamy/batik-util.jar"/>
    <file name="${extlibs.dir}/antisamy/dom4j.jar"/>
    <file name="${extlibs.dir}/antisamy/nekohtml.jar"/>
    <file name="${extlibs.dir}/antisamy/sac.jar"/>
    <file name="${extlibs.dir}/xercesImpl.jar"/>
-->

    <file name="lib/s3lib-r347.jar"/>
    <file name="lib/json.jar"/>
    <file name="lib/jswiff-8.0-beta-2-threerings.jar"/>
    <file name="lib/sdoc-0.5.0-beta-ooo.jar"/>
    <file name="lib/substance-lite.jar"/>

    <!-- The following are used for aperture -->
    <file name="lib/aperture/aperture-2006.1-alpha-3.jar"/>
    <file name="lib/aperture/aperture-test-2006.1-alpha-3.jar"/>
    <file name="lib/aperture/applewrapper-0.1.jar"/>
    <file name="lib/aperture/bcmail-jdk14-132.jar"/>
    <file name="lib/aperture/bcprov-jdk14-132.jar"/>
    <file name="lib/aperture/demork-2.0.jar"/>
    <file name="lib/aperture/fontbox-0.1.0-dev.jar"/>
    <file name="lib/aperture/htmlparser-1.6.jar"/>
    <file name="lib/aperture/ical4j-cvs20061019.jar"/>
    <file name="lib/aperture/jacob-1.10-pre4.jar"/>
    <file name="lib/aperture/openrdf-model-2.0-alpha-3.jar"/>
    <file name="lib/aperture/openrdf-util-2.0-alpha-3.jar"/>
    <file name="lib/aperture/openrdf-util-crazy-debug.jar"/>
    <file name="lib/aperture/openrdf-util-fixed-locking.jar"/>
    <file name="lib/aperture/pdfbox-0.7.3.jar"/>
    <file name="lib/aperture/poi-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/poi-contrib-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/poi-scratchpad-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/rio-2.0-alpha-3.jar"/>
    <file name="lib/aperture/sesame-2.0-alpha-3.jar"/>
    <file name="lib/aperture/winlaf-0.5.1.jar"/>

    <!-- The following are used for webmail address book importing -->
<!--
    <file name="${extlibs.dir}/abimporter.jar"/>
    <file name="${extlibs.dir}/ozcommons.jar"/>
-->

    <!-- The following are used by our Flash clients -->
    <file name="lib/tweener.swc"/>
    <file name="lib/KongregateAPI.swc"/>
  </filelist>

  <!-- fetches our library dependencies -->
  <property name="gwt.version" value="2.6.1"/>
  <target name="mavendeps" depends="prepare">
    <!-- these libraries we need for building and for the server runtime -->
    <artifact:pom id="msoypom" file="pom.xml" />
    <artifact:dependencies filesetId="runtime.fileset" pomRefId="msoypom" />
    <copy todir="${deploy.dir}/lib">
      <fileset refid="runtime.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <!-- these libraries we only need to build -->
    <artifact:dependencies filesetId="build.fileset">
      <!-- this is needed for orth and underwire, which unfortunately were never publicly released,
           but we can't just ship public releases seven years later and hope that they're not
           wildly functionally different from what we originally used -->
      <remoteRepository url="http://build.earth.threerings.net/maven-repository" id="ooo"/>

      <dependency groupId="com.google.gwt" artifactId="gwt-user" version="${gwt.version}"/>
<!--
      <dependency groupId="com.google.gwt" artifactId="gwt-incubator" version="2.0.1"/>
-->
      <dependency groupId="net.sf.advanced-gwt" artifactId="advanced-gwt" version="2.0.9"/>
      <dependency groupId="com.allen-sauer.gwt.dnd" artifactId="gwt-dnd" version="3.1.2"/>

      <dependency groupId="com.threerings" artifactId="narya" version="1.8"/>
      <dependency groupId="com.threerings" artifactId="narya-gwt" version="1.8"/>
      <dependency groupId="com.threerings" artifactId="orth" version="0.9">
        <!-- exclude vile snapshot versions that got shipped, blarg -->
        <exclusion groupId="com.threerings" artifactId="narya"/>
        <exclusion groupId="com.threerings" artifactId="vilya"/>
      </dependency>
      <dependency groupId="com.threerings" artifactId="orth-gwt" version="0.9"/>
      <dependency groupId="com.threerings" artifactId="underwire" version="1.0"/>
      <dependency groupId="com.threerings" artifactId="underwire-gwt" version="1.0"/>
      <dependency groupId="com.threerings" artifactId="gwt-utils" version="1.7.1"/>
      <dependency groupId="com.google.guava" artifactId="guava-gwt" version="18.0"/>
      <!-- findbugs needed for a guava-gwt problem: may not be required in the future -->
      <dependency groupId="net.sourceforge.findbugs" artifactId="jsr305" version="1.3.2"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/build">
      <fileset refid="build.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="mavendeps-as">
    <!-- these libraries we need for building actionscript -->
    <artifact:dependencies filesetId="aslib.fileset">
      <remoteRepository id="ooo-public" url="http://ooo-maven.googlecode.com/hg/repository"/>
      <dependency groupId="org.osflash" artifactId="signals"
                  version="0.8.1-ooo" type="swc"/>
      <dependency groupId="com.threerings" artifactId="toyboxlib"
                  version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="whirledthanelib"
                  version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="thane"
                  version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="naryalib"
                  version="1.9" type="swc"/>
      <dependency groupId="com.threerings" artifactId="vilyalib"
                  version="1.1" type="swc"/>
      <dependency groupId="nochump" artifactId="zip" version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="orthlib"
                  version="0.9" type="swc">
        <!-- exclude vile snapshot versions that got shipped, blarg -->
        <exclusion groupId="com.threerings" artifactId="aspirin"/>
        <exclusion groupId="com.threerings" artifactId="naryalib"/>
      </dependency>
      <dependency groupId="com.threerings" artifactId="whirledlib"
                  version="1.1-SNAPSHOT" type="swc"/>
      <dependency groupId="com.threerings" artifactId="aspirin"
                  version="1.10" type="swc"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="aslib.fileset"/>
      <chainedmapper>
        <mapper type="flatten"/>
        <mapper type="regexp" from="(.+?)(-(SNAPSHOT|ooo))?.swc" to="\1.swc"/>
        <mapper type="regexp" from="(.*)-([^-])+.swc" to="\1.swc"/>
      </chainedmapper>
    </copy>
  </target>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
    <fileset dir="lib" includes="plugin.jar"/>
  </path>

  <!-- declare our test classpath -->
  <path id="test.classpath">
    <path refid="classpath"/>
    <pathelement location="${tclasses.dir}"/>
    <fileset dir="${deploy.dir}/build" includes="*.jar"/>
  </path>

  <!-- declare our GWT classpath -->
  <path id="gwt.classpath">
    <fileset dir="${deploy.dir}/build" includes="*.jar"/>
    <pathelement location="${src.dir}"/>
    <pathelement location="${gsrc.dir}"/>
  </path>

  <!-- gets our various properties files and sticks them in dist -->
  <target name="config">
    <mkdir dir="${deploy.dir}"/>

    <!-- determine which deployment we're building -->
    <if><not><isset property="deployment"/></not><then>
      <property name="deployment" value="test"/>
    </then></if>

    <!-- grab the deployment et al properties from the configuration location. -->
    <dirname property="absolute.deploy.dir" file="${deploy.dir}/somefile.txt"/>
    <copy todir="${absolute.deploy.dir}">
      <fileset dir="${basedir}/etc/${deployment}">
        <include name="msoy-server.properties"/>
        <include name="msoy-server.conf"/>
        <include name="burl-server.properties"/>
        <include name="burl-server.conf"/>
        <include name="build_settings.properties"/>
        <include name="log4j.properties"/>
        <include name="log4j-bureaulauncher.properties"/>
        <include name="ehcache.xml"/>
      </fileset>
    </copy>

    <!-- Read in all the deployment & build configuration bits. -->
    <property file="${deploy.dir}/msoy-server.properties"/>
    <property file="${deploy.dir}/build_settings.properties"/>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare" depends="config">
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${deploy.dir}/build"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc">
        <include name="**/*"/>
      </fileset>
    </copy>
    <mkdir dir="${tclasses.dir}"/>

    <!-- copy all the libs we need for building and for runtime -->
    <copyfilelist dest="${deploy.dir}/lib">
      <filelist refid="runtime.libs"/>
    </copyfilelist>
<!-- TODO
    <copyfilelist dest="${deploy.dir}/build">
      <filelist refid="build.libs"/>
    </copyfilelist>
-->

    <!-- create our toybox propertis from msoy-server.properties -->
    <!-- <exec executable="egrep">
      <arg line="^toybox\."/>
      <arg line="${deploy.dir}/msoy-server.properties"/>
      <redirector output="${classes.dir}/toybox.properties">
        <outputfilterchain>
          <replacestring from="toybox." to=""/>
        </outputfilterchain>
      </redirector>
    </exec> -->
	
    <!-- copy a few configuration files into place -->
    <copy todir="${deploy.dir}" file="${basedir}/etc/logging.properties"/>

    <!-- generate index.html and crossdomain.xml-->
    <propertyregex property="server_url_host" input="${server_url}"
                   regexp="http://([^:]*)(:[0-9]+)?/" replace="\1"/>
    <copy file="pages/index.html.in" tofile="pages/index.html" overwrite="true">
      <filterset>
        <filter token="SERVER_URL" value="${server_url}"/>
        <filter token="SERVER_URL_HOST" value="${server_url_host}"/>
        <filter token="GA_ACCOUNT" value="${ga_account}"/>
      </filterset>
    </copy>
    <propertyregex property="server_url_host" input="${server_url}"
                   regexp="http://([^:/]*):?.*" replace="\1"/>
    <propertyregex property="media_url_host" input="${media_url}"
                   regexp="http://([^:/]*):?.*" replace="\1"/>
    <copy file="pages/crossdomain.xml.in" tofile="pages/crossdomain.xml" overwrite="true">
      <filterset>
        <filter token="SERVER_URL_HOST" value="${server_url_host}"/>
        <filter token="MEDIA_URL_HOST" value="${media_url_host}"/>
        <filter token="HTTP_PORT" value="${http_port}"/>
      </filterset>
    </copy>

    <!-- copy our HTML sanitizer configuration -->
    <copy file="${basedir}/etc/antisamy-config.xml" todir="${deploy.dir}"/>
  </target>

  <!-- defines our various presents ant tasks -->
  <target name="toolprep" depends="prepare">
    <artifact:dependencies pathId="tools.classpath">
      <dependency groupId="com.threerings" artifactId="narya-tools" version="1.9"/>
    </artifact:dependencies>
    <taskdef resource="com/threerings/presents/tools.properties"
             classpathref="tools.classpath"/>
  </target>

  <target name="flexserver" depends="toolprep">
    <java classname="com.martiansoftware.nailgun.NGServer" maxmemory="256m" fork="true">
      <classpath>
        <pathelement location="${flexsdk.dir}/lib/mxmlc.jar"/>
        <pathelement location="${flexsdk.dir}/lib/compc.jar"/>
        <pathelement location="${extlibs.dir}/nailgun.jar"/>
      </classpath>
      <jvmarg value="-Djava.awt.headless=true"/>
    </java>
  </target>

  <!-- creates page.gwt.xml from page.gwt.xml.in, doing user agent fiddling -->
  <target name="preppage">
    <copy file="${gsrc.dir}/${page}.gwt.xml.in"
          tofile="${gsrc.dir}/${page}.gwt.xml" overwrite="true"/>
  </target>

  <!-- regenerates our i18n messages classes -->
  <target name="gmsgs">
    <taskdef name="i18nsync" classname="com.threerings.gwt.tools.I18nSyncTask"
             classpathref="classpath"/>
    <i18nsync srcdir="${gsrc.dir}">
      <fileset dir="${gsrc.dir}" includes="client/*/*Messages.properties"/>
    </i18nsync>
  </target>

  <!-- prepares to build our GWT client -->
  <target name="jprepare" depends="prepare">
    <tstamp>
      <format property="build_time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <!-- set default properties -->
    <property name="dev_deployment" value="true"/>
    <!-- fucking ant -->
    <if><isset property="recaptcha_public"/><then>
      <property name="recaptcha_token" value="${recaptcha_public}"/>
    </then><else>
      <property name="recaptcha_token" value=""/>
    </else></if>
    <!-- then overwrite with values read from msoy-server.properties -->
    <copy file="${src.dir}/com/threerings/msoy/data/all/DeploymentConfig.java.tmpl"
          tofile="${src.dir}/com/threerings/msoy/data/all/DeploymentConfig.java" overwrite="true">
      <filterset>
        <filter token="build_time" value="${build_time}"/>
        <filter token="build_version" value="${version}"/>
        <filter token="server_url" value="${server_url}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="media_url" value="${media_url}"/>
        <filter token="static_media_url" value="${static_media_url}"/>
        <filter token="dev_deployment" value="${dev_deployment}"/>
        <filter token="recaptcha_public" value="${recaptcha_token}"/>
        <filter token="billing_url" value="${billing_url}"/>
        <filter token="signing_key_id" value="${cloud_signing_key_id}"/>
      </filterset>
    </copy>
  </target>

  <!-- compiles our GWT sources with javac; handy for smoke testing -->
  <target name="gcompile">
    <echo>Compiling GWT classes...</echo>
    <mkdir dir="${deploy.dir}/gclasses"/>
    <javac srcdir="${gsrc.dir}" destdir="${deploy.dir}/gclasses" includeAntRuntime="false"
           debug="on" optimize="off" source="1.6" target="1.6">
      <classpath>
        <path refid="gwt.classpath"/>
        <pathelement path="${classes.dir}"/>
      </classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:-path"/>
      <compilerarg value="-Xlint:-deprecation"/>
    </javac>
    <delete dir="${deploy.dir}/gclasses"/>
  </target>

  <!-- builds our numerous GWT web clients -->
  <target name="gclients" depends="jprepare,gmsgs"
        description="Builds all GWT clients (use -Dpages to choose which).">
    <pathconvert property="allpages" pathsep=",">
      <path><fileset dir="src/gwt" includes="*.gwt.xml.in"/></path>
      <mapper type="regexp" from=".*(/|\\)([a-z]+).gwt.xml.in" to="\2"/>
    </pathconvert>
    <echo>Converted ${allpages}</echo>
    <property name="pages" value="${allpages}"/>
    <for list="${pages}" param="page">
    <sequential>
      <antcall target="gpage" inheritAll="true">
        <param name="page" value="@{page}"/>
      </antcall>
    </sequential></for>
  </target>

  <!-- builds a single GWT web client module (without dependencies) -->
  <target name="gpage">
    <property name="pageout.dir" value="${gwtout.dir}/${version}"/>
    <mkdir dir="${pageout.dir}"/>
    <delete dir="${pageout.dir}/${page}"/>
    <mkdir dir="${pageout.dir}/${page}"/>

    <!-- prepare our temporary .gwt.xml file -->
    <antcall target="preppage"><param name="page" value="${page}"/></antcall>

    <!-- invoke the GWT compiler and grindy grindy grindy -->
    <artifact:dependencies pathId="gwt-dev.classpath">
      <dependency groupId="com.google.gwt" artifactId="gwt-dev" version="${gwt.version}"/>
    </artifact:dependencies>
    <java fork="true" maxmemory="1024M" failonerror="false" resultproperty="gwt.result"
     classname="com.google.gwt.dev.Compiler">
      <classpath>
        <path refid="gwt-dev.classpath"/>
        <path refid="gwt.classpath"/>
      </classpath>
      <jvmarg value="-Djava.awt.headless=true"/>
      <arg value="-style"/><arg value="${gwt_style}"/>
      <arg value="-war"/>
      <arg value="${pageout.dir}"/>
      <arg value="${page}"/>
      <!-- gather all the compiler output into a property -->
      <redirector outputproperty="redirector.out"/>
    </java>

    <!-- delete our temporary .gwt.xml file -->
    <delete file="${gsrc.dir}/${page}.gwt.xml"/>

    <!-- until the GWT compiler does the right thing echo errors/warnings correctly -->
    <if><contains string="${redirector.out}" substring="[ERROR]"/><then>
        <echo level="error">${redirector.out}</echo>
        <!-- be really, really sure that the build fails if we get an error logs -->
        <property name="has.errors" value="true"/>
      </then><elseif><contains string="${redirector.out}" substring="[WARNING]"/><then>
          <echo level="warning">${redirector.out}</echo>
      </then></elseif><else>
        <echo level="info">${redirector.out}</echo>
    </else></if>

    <!-- fail the build if the GWT compiler returned 1 or errors were detected -->
    <fail message="The GWT build failed. See output for details.">
      <condition><or>
          <equals arg1="${gwt.result}" arg2="1"/>
          <isset property="has.errors"/>
      </or></condition>
    </fail>

    <!-- if we succeeded, gzip our generated HTML output -->
    <apply failonerror="true" executable="gzip">
      <arg value="-k"/>
      <srcfile/>
      <fileset dir="${pageout.dir}/${page}" includes="*.cache.html"/>
    </apply>

    <!-- if we're building the 'frame' page, we need to move it up out of the version dir -->
    <if><equals arg1="${page}" arg2="frame"/><then>
      <move file="${pageout.dir}/${page}" todir="${gwtout.dir}"/>
    </then></if>

    <!-- clear out some variables -->
    <var name="gwt.result" unset="true"/>
    <var name="redirector.out" unset="true"/>
    <var name="has.errors" unset="true"/>
  </target>

  <!-- prepares to build our Flash client -->
  <target name="asprepare" depends="prepare">
    <echo message="The Flex SDK is in ${flexsdk.dir}."/>

    <mkdir dir="pages/clients/${version}"/>
    <tstamp>
      <format property="build_time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <!-- set default properties -->
    <property name="dev_deployment" value="true"/>
    <property name="socket_policy_port" value="47623"/>
    <property name="log_levels_config" value=""/>
    <property name="xdom_url" value="${media_url}crossdomain.xml"/>
    <property name="stub_url" value="${media_url}MediaStub.swf"/>
    <!-- then overwrite with values read from msoy-server.properties -->
    <copy file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as.tmpl"
          tofile="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"
          overwrite="true">
      <filterset>
        <filter token="build_time" value="${build_time}"/>
        <filter token="build_version" value="${version}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="server_ports" value="${server_ports}"/>
        <filter token="socket_policy_port" value="${socket_policy_port}"/>
        <filter token="server_url" value="${server_url}"/>
        <filter token="media_url" value="${media_url}"/>
        <filter token="dev_deployment" value="${dev_deployment}"/>
        <filter token="static_media_url" value="${static_media_url}"/>
        <filter token="log_levels_config" value="${log_levels_config}"/>
        <filter token="billing_url" value="${billing_url}"/>
        <filter token="announce_group_id" value="${announce_group_id}"/>
        <filter token="signing_key_id" value="${cloud_signing_key_id}"/>
        <filter token="xdom_url" value="${xdom_url}"/>
        <filter token="stub_url" value="${stub_url}"/>
      </filterset>
    </copy>
    <copy file="lib/framework_3.3.0.4852.swz" todir="pages/clients"/>
    <copy file="lib/framework_3.3.0.4852.swf" todir="pages/clients"/>
    <copy file="etc/msoy-config.xml.in" tofile="${deploy.dir}/msoy-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="server_url" value="${server_url}"/>
      </filterset>
    </copy>
  </target>

  <!-- just rebuilds the Flash client, assumes nothing has changed -->
  <target name="ascompile">
    <!-- set default properties (they're set only if unset) -->
    <property name="aspath" value="client/world.mxml"/>
    <property name="swfname" value="world-client"/>
    <property name="dev_deployment" value="true"/>
    <property name="flex.extra-arg" value="-externs=DummyValueIgnore"/>
    <property name="flex.extra-arg-2" value="-externs=DummyValueIgnore"/>
    <property name="copydir" value="pages/clients/${version}"/>
    <mxmlc dest="${deploy.dir}/${swfname}.swf"
        srcdir="${asrc.dir}" main="com/threerings/msoy/${aspath}"
        stacktraces="${dev_deployment}" config="${deploy.dir}/msoy-config.xml">
      <arg value="${flex.extra-arg}"/>
      <arg value="${flex.extra-arg-2}"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/aspirin.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/naryalib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/nenyalib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/vilyalib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/zip.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/whirledlib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/orthlib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/toyboxlib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/as3corelib.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/flexlib-bin.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/tweener.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/KongregateAPI.swc"/>
      <arg value="-compiler.library-path+=${deploy.dir}/lib/signals.swc"/>
      <arg value="-compiler.source-path+=rsrc/{locale}/i18n"/>
      <!-- This sets the SWF size, not the app size, and we set it to
           this size for the avatar viewer's native size. -->
      <arg value="-default-size"/>
      <arg value="600"/>
      <arg value="488"/>
    </mxmlc>
    <if><not><equals arg1="${copydir}" arg2=""/></not>
      <then>
        <copy file="${deploy.dir}/${swfname}.swf" todir="${copydir}"/>
      </then>
    </if>
  </target>

  <target name="generate-link-report">
    <xslt in="/tmp/link-report.xml" out="link-report.html" style="etc/link-report.xsl"/>
  </target>

  <!-- builds our Flash world client -->
  <target name="asclient" depends="asprepare"
          description="Builds the Flash world client.">
    <antcall target="ascompile">
      <param name="aspath" value="client/world.mxml"/>
      <param name="swfname" value="world-client"/>
    </antcall>
  </target>

  <!-- builds our Flash debug client -->
  <target name="asdebug" depends="asprepare">
    <antcall target="ascompile"><param name="flex.extra-arg" value="-compiler.debug"/></antcall>
  </target>

  <!-- build the viewer, for inclusion in the SDK -->
  <target name="viewer" description="Build the viewer for the SDK.">
    <antcall target="asprepare">
      <param name="dev_deployment" value="false"/>
    </antcall>
    <antcall target="ascompile">
      <param name="aspath" value="client/world.mxml"/>
      <param name="swfname" value="viewer"/>
      <param name="copydir" value="/export/whirled/lib"/>
      <param name="dev_deployment" value="false"/>
      <param name="flex.extra-arg" value="-static-link-runtime-shared-libraries=true"/>
      <param name="flex.extra-arg-2" value="-incremental=false"/>
    </antcall>
  </target>

  <!-- builds our thane game client -->
  <target name="thane-client" depends="asprepare" description="Builds the thane game client.">
    <copy file="etc/thane-config.xml.in" tofile="${deploy.dir}/thane-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
    <!-- create msoylib.swc to hold the entire set of dependent classes -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="dist/thane-config.xml"/>
      <arg value="-compiler.external-library-path"/>
      <arg value="${deploy.dir}/lib/thane.swc"/>
      <arg value="-compiler.library-path"/>
      <arg value="${deploy.dir}/lib"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/msoylib.swc"/>
      <arg value="-compiler.source-path"/>
      <arg value="src/thane"/>
      <arg value="src/as"/>
      <arg value="-include-sources=src/thane/Reference.as"/>
    </java>

    <!-- link the executable -->
    <java jar="${flexsdk.dir}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="dist/thane-config.xml"/>
      <arg value="-compiler.external-library-path"/>
      <arg value="${deploy.dir}/lib/thane.swc"/>
      <arg value="${deploy.dir}/msoylib.swc"/>
      <arg value="-compiler.source-path=src/thane"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/MsoyThaneClient.swf"/>
      <arg value="src/thane/MsoyThaneClient.as"/>
    </java>

    <echo message="Turning .swfs into .abcs..."/>
    <path id="swfx.classpath">
      <file name="lib/swfutils-ooo.jar"/>
      <file name="lib/asc.jar"/>
      <file name="lib/flexTasks.jar"/>
    </path>
    <java outputproperty="dump" classpathref="swfx.classpath"
          classname="flash.swf.tools.SwfxPrinter" fork="true" failonerror="true">
      <arg value="-dump"/>
      <arg value="${deploy.dir}/msoylib.abc"/>
      <arg value="${deploy.dir}/msoylib.swc"/>
    </java>
    <java outputproperty="dump" classpathref="swfx.classpath"
          classname="flash.swf.tools.SwfxPrinter" fork="true" failonerror="true">
      <arg value="-dump"/>
      <arg value="${deploy.dir}/MsoyThaneClient.abc"/>
      <arg value="${deploy.dir}/MsoyThaneClient.swf"/>
    </java>
  </target>

  <!-- builds the mediastub that's used to wrap SWF media -->
  <target name="mediastub">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="aspath" value="applets/MediaStub.as"/>
      <param name="swfname" value="MediaStub"/>
      <param name="copydir" value="pages/media"/> <!-- this gets published specially -->
    </antcall>
  </target>

  <target name="embedstub">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="flex.extra-arg-2" value="-use-network"/>
      <param name="aspath" value="applets/EmbedStub.as"/>
      <param name="swfname" value="embedstub-base"/>
      <param name="copydir" value=""/> <!-- don't copy anywhere -->
    </antcall>
  </target>

  <target name="mochistub">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="flex.extra-arg-2" value="-use-network"/>
      <param name="aspath" value="applets/EmbedStubMochiAd.as"/>
      <param name="swfname" value="mochistub-base"/>
      <param name="copydir" value=""/> <!-- don't copy anywhere -->
    </antcall>
  </target>

  <target name="remixer" depends="asprepare">
    <antcall target="ascompile">
      <param name="aspath" value="applets/remixer.mxml"/>
      <param name="swfname" value="remixer"/>
    </antcall>
  </target>

  <target name="imageeditor" depends="asprepare">
    <antcall target="ascompile">
      <param name="aspath" value="applets/imageeditor.mxml"/>
      <param name="swfname" value="imageeditor"/>
    </antcall>
  </target>

  <target name="camerabutton" depends="asprepare">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="aspath" value="applets/CameraButtonApp.as"/>
      <param name="swfname" value="camerabutton"/>
    </antcall>
  </target>

  <!-- builds our media uploader -->
  <target name="uploader" depends="asprepare">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="aspath" value="applets/UploaderApp.as"/>
      <param name="swfname" value="uploader"/>
    </antcall>
  </target>

  <!-- builds our video player -->
  <target name="videoplayer" depends="asprepare">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="aspath" value="applets/VideoPlayerApp.as"/>
      <param name="swfname" value="videoplayer"/>
    </antcall>
  </target>

  <!-- builds our audio player -->
  <target name="audioplayer" depends="asprepare">
    <antcall target="ascompile">
      <param name="flex.extra-arg" value="-static-rsls=true"/>
      <param name="aspath" value="applets/AudioPlayerApp.as"/>
      <param name="swfname" value="audioplayer"/>
    </antcall>
  </target>

  <!-- builds our whirled map -->
  <target name="whirledmap" depends="asprepare">
    <ant dir="projects/whirledmap" target="dist" inheritAll="false">
      <property name="flexsdk.dir" value="${flexsdk.dir}"/>
    </ant>
    <copy file="${deploy.dir}/whirledmap.swf" todir="pages/clients/${version}"/>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="toolprep">
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
    <genascriptstreamable classpathref="classpath" header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </genascriptstreamable>
    <!-- <asimports srcdir="${asrc.dir}"/> -->
  </target>

  <target name="genstreamable" depends="toolprep">
    <!-- make sure the streamable class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/data/*.java"/>
    </javac>
    <genascriptstreamable classpathref="classpath" header="lib/SOURCE_HEADER"
      asroot="${asrc.dir}">
      <fileset dir="${src.dir}" includes="**/data/*.java" excludes="**/*Object.java"/>
    </genascriptstreamable>
    <!-- <asimports srcdir="${asrc.dir}"/> -->
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation service declarations -->
  <target name="genservice" depends="toolprep">
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/client/*Service.java"/>
      <exclude name="**/web/**"/>
    </javac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" asroot="${asrc.dir}" classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/client/*Service.java"/>
        <exclude name="**/admin/**"/>
        <exclude name="**/peer/**"/>
        <exclude name="**/client/GameServerService.java"/>
        <exclude name="**/client/BureauLauncherService.java"/>
      </fileset>
      <adapter service="WorldGameService"/>
      <adapter service="WorldService"/>
    </genservice>
    <genservice header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/admin/client/*Service.java"/>
        <include name="**/peer/client/*Service.java"/>
        <include name="**/client/GameServerService.java"/>
        <include name="**/client/BureauLauncherService.java"/>
      </fileset>
    </genservice>
    <!-- <asimports srcdir="${asrc.dir}"/> -->
  </target>

  <!-- generates sender and decoder classes for all invocation receiver declarations -->
  <target name="genreceiver" depends="toolprep">
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genreceiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/*Receiver.java"/>
      </fileset>
    </genreceiver>
    <!-- <asimports srcdir="${asrc.dir}"/> -->
  </target>

  <!-- adds readField and writeField methods to Streamable classes (NOTE: disabled!) -->
  <target name="procstream" depends="toolprep">
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="classpath"/>
      <!--<fileset dir="${classes.dir}" includes="**/data/*.class"/>-->
      <fileset dir="${classes.dir}" includes="**/data/**/*.class"/>
    </instream>
  </target>

  <!-- generates our FooServiceAsync interfaces for GWT -->
  <target name="genasync" description="Regenerates GWT Async interfaces.">
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <include name="**/gwt/*Service.java"/>
    </javac>
    <!-- now actually generate the async interfaces -->
    <taskdef name="genasync" classname="com.samskivert.asyncgen.AsyncGenTask"
             classpath="extlibs/java/gwt-asyncgen.jar"/>
    <genasync classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/gwt/*Service.java"/>
    </genasync>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <mkdir dir="${basedir}/${deploy.dir}/tmp"/>
    <taskdef name="unit" classpath="${deploy.dir}/build/junit4.jar"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

    <unit printsummary="no" haltonfailure="yes" fork="yes" dir="${basedir}">
      <classpath refid="test.classpath"/>
      <formatter type="brief" usefile="false" unless="use.xml.output"/>
      <formatter type="xml" usefile="true" if="use.xml.output"/>

      <!-- Vend the test. properties -->
      <syspropertyset>
        <propertyref prefix="test."/>
      </syspropertyset>

      <!-- batch run our tests -->
      <batchtest todir="${basedir}/${deploy.dir}/tmp" unless="test">
        <fileset dir="${src.dir}">
          <include name="**/*UnitTest.java"/>

          <!-- XXX A nasty way to exclude S3 tests. This is fragile and
               not-good, but I don't know of a better way to do it -->
          <exclude name="**/ProjectS3StorageUnitTest.java" unless="test.aws.id"/>
        </fileset>
      </batchtest>

      <!-- or run the requested test -->
      <test name="${test}" if="test"/>
    </unit>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="jprepare,qcompile" description="Builds java class files."/>

  <!-- builds the java class files only, without preparing the build directories etc. -->
  <target name="qcompile">
    <echo>Compiling main classes...</echo>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="off" deprecation="on" source="1.6" target="1.6">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:-path"/>
      <exclude name="**/tests/**"/>
    </javac>

    <echo>Compiling test classes...</echo>
    <javac srcdir="${src.dir}" destdir="${tclasses.dir}" includeAntRuntime="false"
           debug="on" optimize="off" deprecation="on" source="1.6" target="1.6">
      <classpath refid="test.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:-path"/>
      <include name="**/tests/**"/>
    </javac>
  </target>

  <!-- builds the ActionScript documention -->
  <target name="asdoc">
    <mkdir dir="${deploy.dir}/asdocs"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <jvmarg value="-Dos.name=Windows"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path ${deploy.dir}/lib"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources ${asrc.dir}"/>
      <arg line="-output ${deploy.dir}/asdocs"/>
    </java>
  </target>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile,distcode">
    <!-- copy the translation strings for the news feed emails -->
    <mkdir dir="${classes.dir}/rsrc/i18n/feed"/>
    <copy todir="${classes.dir}/rsrc/i18n/feed" flatten="true">
      <fileset dir="src/gwt">
        <include name="**/PersonMessages.properties"/>
        <include name="**/DynamicMessages.properties"/>
      </fileset>
    </copy>
    <!-- and all of our configuration and media in another -->
    <jar file="${deploy.dir}/${app.name}-media.jar" basedir="${classes.dir}" includes="rsrc/**"/>
    <!-- and our server-only data in yet another -->
    <jar file="${deploy.dir}/${app.name}-data.jar" basedir="." includes="data/dictionary/**"/>
  </target>

  <!-- just builds the msoy-code.jar without changing any config or any futzing -->
  <target name="distcode" depends="qcompile">
    <!-- stick all our code in one jar file -->
    <jar file="${deploy.dir}/${app.name}-code.jar" basedir="${classes.dir}">
      <include name="com/**"/>
      <include name="*.properties"/>
      <include name="rsrc/**/*.properties"/>
      <include name="rsrc/**/*.tmpl"/>
    </jar>
  </target>

  <!-- builds top-level flash applications. -->
  <target name="flashapps" depends="asprepare,mediastub,embedstub,mochistub,videoplayer,audioplayer,remixer,imageeditor,camerabutton,uploader,asclient"
          description="Builds all Flash clients and applets.">
  </target>

  <target name="copythanebinaries" depends="prepare">
    <!-- Run a special target in thane that will copy the right executable file into the -->
    <!-- thane/dist directory. -->
    <ant dir="projects/thane" target="distbinary"/>

    <!-- copy the distbinary result into our dist directory -->
    <if><available file="projects/thane/dist/avmthane"/>
      <then><property name="avmthane" value="avmthane"/></then>
      <else><property name="avmthane" value="avmthane.exe"/></else>
    </if>
    <copy file="projects/thane/dist/${avmthane}" todir="${deploy.dir}/lib"/>

    <!-- executable permission must be set manually :( -->
    <chmod perm="oug+x" file="dist/lib/avmthane"/>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distbits" depends="dist,flashapps,thane-client"/>
  <target name="distall-package"
          depends="prepare,mavendeps,mavendeps-as,distbits,tests,gclients"/>
  <target name="distall" depends="copythanebinaries,distall-package"
          description="Builds entire system (does not package)."/>

  <!-- cleans out the compiled code -->
  <target name="clean" description="Cleans out compiled code.">
    <delete dir="${classes.dir}/com"/>
    <delete file="${src.dir}/com/threerings/msoy/data/all/DeploymentConfig.java"/>
  </target>

  <!-- cleans out the compiled ActionScript code and caches -->
  <target name="asclean">
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.cache"/></delete>
    <delete file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"/>
  </target>

  <!-- cleans out the compiled GWT bits and caches -->
  <target name="gclean">
    <delete dir="${gwtout.dir}"/>
  </target>

  <!-- cleans out things we don't want lingering after an automated build -->
  <target name="postclean">
    <delete dir="pages/clients"/>
    <delete file="pages/media/static/game/tutorial.swf"/>
    <delete file="pages/media/MediaStub.swf"/>
    <delete file="pages/index.html"/>
    <delete file="pages/crossdomain.xml"/>
    <!-- TODO: remove this one after a build or two -->
    <delete file="pages/js/facebook.js"/>
    <delete><fileset dir="${gsrc.dir}" includes="**/*Messages.java"/></delete>
  </target>

  <!-- fully cleans out all build results -->
  <target name="distclean" depends="clean,asclean,gclean,postclean">
    <delete dir="${deploy.dir}"/>
    <ant dir="projects/whirledmap" target="clean" inheritAll="false"/>
    <ant dir="projects/mchooser" target="distclean" inheritAll="false"/>
  </target>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distclean"
        description="Fully cleans out the application and all subprojects."/>

  <!-- assigns a version number to this build -->
  <target name="assignversion">
    <var name="version" unset="true"/>
    <tstamp><format property="version" pattern="yyyyMMddHHmmss"/></tstamp>
    <echo>Assigned build version ${version}</echo>
  </target>

  <!-- warns if calling package with non-production deployment -->
  <target name="check-package">
    <property name="deployment" value="prod"/>
    <if><not><equals arg1="${deployment}" arg2="prod"/></not><then>
      <echo>WARNING: Building package for ${deployment} deployment.</echo>
      <echo>WARNING: Usually one only packages the 'prod' deployment.</echo>
    </then></if>
  </target>

  <!-- prepares and builds the msoy package(s) -->
  <target name="package" depends="check-package,assignversion,distall-package"
          description="Builds entire system and generates dpkg files.">
    <!-- define the directory from which we're going to build our packages -->
    <property name="pkgroot.root" value="${deploy.dir}/packages"/>
    <mkdir dir="${pkgroot.root}"/>

    <!-- define the root of our packages on the target machine -->
    <property name="app.prefix" value="/export/${app.name}"/>

    <!-- define the root of the msoy-server-code package -->
    <property name="pkgroot.server.code" value="${pkgroot.root}/${app.name}-server-code"/>
    <property name="approot.server.code" value="${pkgroot.server.code}/${app.prefix}"/>
    <mkdir dir="${approot.server.code}"/>

    <!-- define the root of the msoy-server package -->
    <property name="pkgroot.server" value="${pkgroot.root}/${app.name}-server"/>
    <property name="approot.server" value="${pkgroot.server}/${app.prefix}"/>
    <mkdir dir="${approot.server}"/>

    <!-- define the root of the burl-server package -->
    <property name="pkgroot.burlserver" value="${pkgroot.root}/burl-server"/>
    <property name="approot.burlserver" value="${pkgroot.burlserver}/${app.prefix}"/>
    <mkdir dir="${approot.burlserver}"/>

    <!-- copy the external jars needed by the server -->
    <copy todir="${approot.server.code}/${deploy.dir}/lib">
      <fileset dir="${deploy.dir}/lib">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- copy the thane native binaries needed by all servers -->
    <copy todir="${approot.server.code}/bin/thane">
      <fileset dir="projects/thane/bin">
        <include name="*/avmthane"/>
      </fileset>
    </copy>

    <!-- copy this project's jar files and configuration -->
    <copy todir="${approot.server.code}/${deploy.dir}">
      <fileset dir="${deploy.dir}">
        <include name="*.jar"/>
        <exclude name="*-client.jar"/>
        <include name="*.properties"/>
        <include name="*.conf"/>
        <!-- skip files with secure information -->
        <exclude name="*-server.properties"/>
        <exclude name="*-server.conf"/>
        <include name="msoylib.abc"/>
        <include name="MsoyThaneClient.abc"/>
        <!-- skip build_settings.properties since it's only needed at build time -->
        <exclude name="build_settings.properties"/>
      </fileset>
    </copy>

    <!-- copy jars and configuration exclusive to msoy -->
    <copy todir="${approot.server}/${deploy.dir}">
      <fileset dir="${deploy.dir}">
        <include name="msoy-server.properties"/>
        <include name="msoy-server.conf"/>
        <include name="*.policy"/>
      </fileset>
    </copy>

    <!-- copy libs and config exclusive to burl -->
    <copy todir="${approot.burlserver}/${deploy.dir}">
      <fileset dir="${deploy.dir}">
        <include name="burl-server.properties"/>
        <include name="burl-server.conf"/>
      </fileset>
    </copy>

    <!-- copy various scripts needed by the all servers -->
    <copyfilelist dest="${approot.server.code}/bin">
      <filelist dir="bin">
        <file name="msoyjava"/>
        <file name="runcommon"/>
        <file name="runthaneclient"/>
        <file name="prunemedia"/>
      </filelist>
    </copyfilelist>

    <!-- copy various scripts needed by msoy only  -->
    <copyfilelist dest="${approot.server}/bin">
      <filelist dir="bin">
        <file name="msoy"/>
        <file name="msoyrespawn"/>
        <file name="runmsoy"/>
        <file name="runpolicy"/>
      </filelist>
    </copyfilelist>

    <!-- copy various scripts needed by burl only -->
    <copyfilelist dest="${approot.burlserver}/bin">
      <filelist dir="bin">
        <file name="burl"/>
        <file name="burlrespawn"/>
        <file name="runburl"/>
      </filelist>
    </copyfilelist>

    <!-- copy in the dictionaries (msoy only) -->
    <mkdir dir="${approot.server}/data"/>
    <copy todir="${approot.server}/data">
      <fileset dir="data">
        <include name="dictionary/**"/>
      </fileset>
    </copy>

    <!-- need some xml files and the embed stub (msoy only) -->
    <copy file="${deploy.dir}/ehcache.xml" todir="${approot.server}/${deploy.dir}"/>
    <copy file="${deploy.dir}/antisamy-config.xml" todir="${approot.server}/${deploy.dir}"/>
    <copy file="${deploy.dir}/embedstub-base.swf" todir="${approot.server}/${deploy.dir}"/>
    <copy file="${deploy.dir}/mochistub-base.swf" todir="${approot.server}/${deploy.dir}"/>

    <!-- create some runtime directories (all servers) -->
    <mkdir dir="${approot.server.code}/log/lighttpd"/>
    <mkdir dir="${approot.server.code}/run"/>

    <!-- create our production security.policy files (msoy only) -->
    <copy file="etc/security.policy.in" tofile="${approot.server}/${deploy.dir}/security.policy">
      <filterset>
        <filter token="PREFIX" value="${app.prefix}"/>
      </filterset>
    </copy>

    <!-- set up our pages/ contents (msoy only) -->
    <copy todir="${approot.server}/pages">
      <fileset dir="pages">
        <exclude name="**/*.in"/>
        <exclude name="**/.gwt-tmp/**"/>
        <exclude name="**/gwt-unitCache/**"/>
        <exclude name="**/*-aux/**"/>
      </fileset>
      <fileset dir="data" includes="whirled_sdk*.zip"/>
    </copy>

    <!-- copy in our Linux msoy server startup script (msoy only) -->
    <mkdir dir="${approot.server}/etc/init.d"/>
    <copy file="${basedir}/etc/init.d/msoy-server" todir="${approot.server}/etc/init.d"/>

    <!-- copy in our Linux policy server startup script (msoy only) -->
    <copy file="${basedir}/etc/init.d/msoy-policy" todir="${approot.server}/etc/init.d"/>

    <!-- copy in our Linux bureau launcher startup script -->
    <mkdir dir="${approot.burlserver}/etc/init.d"/>
    <copy file="${basedir}/etc/init.d/msoy-burl" todir="${approot.burlserver}/etc/init.d"/>

    <!-- Also create our FreeBSD msoy server startup scripts (msoy only) -->
<!--
    <mkdir dir="${approot.server}/etc/rc.d"/>
    <startupscript name="msoy_server" runas="${msoy.user}"
                   output="${approot.server}/etc/rc.d/${app.name}-server.sh">
      <commands>
        <start cmdline="${app.prefix}/bin/msoy start"/>
        <stop cmdline="${app.prefix}/bin/msoy stop"/>
      </commands>
    </startupscript>
-->
    <!-- create FreeBSD policy server startup script (msoy only) -->
<!--
    <startupscript name="policy_server" runas="root"
                   pidfile="${app.prefix}/run/policy-server.pid"
                   output="${approot.server}/etc/rc.d/policy-server.sh">
      <command cmd="/usr/sbin/daemon" args="-f ${app.prefix}/bin/runpolicy" procname="*java*"/>
    </startupscript>
-->
    <!-- create FreeBSD bureau launcher startup script -->
<!--
    <mkdir dir="${approot.burlserver}/etc/rc.d"/>
    <startupscript name="msoy_bureau" runas="${burl.user}"
                   output="${approot.burlserver}/etc/rc.d/${app.name}-bureau.sh">
      <commands>
        <start cmdline="${app.prefix}/bin/burl start"/>
        <stop cmdline="${app.prefix}/bin/burl stop"/>
      </commands>
    </startupscript>
-->

    <!-- build the actual Debian packages -->

    <!-- msoy-server-code -->
    <dpkg output="${pkgroot.root}" prefix="${app.prefix}" distribution="local">
      <package destroot="${pkgroot.server.code}">
        <info>
          <name>${app.name}-server-code</name>
          <version>${version}</version>
          <arch>all</arch>
          <description>Msoy Game Server Code</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
        <permissions>
          <permission user="root" group="${msoy.group}" mode="775" recursive="false">
            <path>log/</path>
            <path>run/</path>
          </permission>
          <permission mode="555" recursive="true">
            <path>bin/</path>
            <path>etc/init.d/</path>
            <path>etc/rc.d/</path>
          </permission>
        </permissions>
      </package>
    </dpkg>

    <!-- msoy-server -->
    <dpkg output="${pkgroot.root}" prefix="${app.prefix}" distribution="local">
      <package destroot="${pkgroot.server}">
        <info>
          <name>${app.name}-server</name>
          <version>${version}</version>
          <arch>all</arch>
          <description>Msoy Game Server</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
        <dependencies>
          <require package="msoy-server-code">
            <equalTo>${version}</equalTo>
          </require>
        </dependencies>
        <permissions>
          <permission user="${msoy.user}" group="${msoy.group}" mode="755" recursive="false">
            <path>pages/media/</path>
            <path>pages/buildresults/</path>
          </permission>
          <permission mode="555" recursive="true">
            <path>bin/</path>
            <path>etc/init.d/</path>
            <path>etc/rc.d/</path>
          </permission>
          <permission user="${msoy.user}" group="${msoy.group}" mode="550">
            <path>dist/msoy-server.properties</path>
          </permission>
        </permissions>
      </package>
    </dpkg>

    <!-- burl-server -->
    <dpkg output="${pkgroot.root}" prefix="${app.prefix}" distribution="local">
      <package destroot="${pkgroot.burlserver}">
        <info>
          <name>burl-server</name>
          <version>${version}</version>
          <arch>all</arch>
          <description>Msoy Bureau Server</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
        <dependencies>
          <require package="msoy-server-code">
            <equalTo>${version}</equalTo>
          </require>
        </dependencies>
        <permissions>
          <permission mode="555" recursive="true">
            <path>bin/</path>
            <path>etc/init.d/</path>
            <path>etc/rc.d/</path>
          </permission>
          <permission user="${burl.user}" group="${msoy.group}" mode="550">
            <path>dist/burl-server.properties</path>
          </permission>
        </permissions>
      </package>
    </dpkg>
  </target>

</project>
